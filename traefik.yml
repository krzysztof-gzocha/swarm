version: '3.8'

services:

  traefik:
    image: traefik:v2.3
    container_name: traefik
    restart: on-failure
    security_opt:
      - no-new-privileges:true
    ports:
      - 80:80/tcp
      - 443:443/tcp
      - 8883:8883/tcp
      - 53:53
      - 53:53/udp
    deploy:
      placement:
        constraints:
          - node.role == manager
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.safe-dashboard.entrypoints=https"
      - "traefik.http.routers.safe-dashboard.tls=true"
      - "traefik.http.routers.safe-dashboard.rule=Host(`traefik.${SWARM_HOST}`)"
      - "traefik.http.routers.safe-dashboard.service=api@internal"
      - "traefik.http.routers.safe-dashboard.middlewares=secured@file"
      - "traefik.http.routers.safe-metrics.entrypoints=https"
      - "traefik.http.routers.safe-metrics.tls=true"
      - "traefik.http.routers.safe-metrics.rule=Host(`traefik.${SWARM_HOST}`) && PathPrefix(`/metrics`)"
      - "traefik.http.routers.safe-metrics.service=prometheus@internal"
      - "traefik.http.routers.safe-metrics.middlewares=secured@file"
      - "traefik.http.routers.unsafe-dashboard.tls=false"
      - "traefik.http.routers.unsafe-dashboard.entrypoints=http"
      - "traefik.http.routers.unsafe-dashboard.middlewares=redirect-to-https@file"
      - "traefik.http.routers.unsafe-dashboard.rule=Host(`traefik.${SWARM_HOST}`)"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certificates:ro
      - ./config/traefik:/configuration/dynamic:ro
      - ./config/traefik.yml:/configuration/traefik.yml:ro
    command:
      - --configFile=/configuration/traefik.yml
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

  whoami:
    container_name: whoami
    image: containous/whoami
    depends_on:
      - traefik
    restart: on-failure
    security_opt:
      - no-new-privileges:true
    ports:
      - "80/tcp"
    deploy:
      mode: global # exactly 1 container per swarm node
      update_config:
        order: start-first
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.safe-whoami.entrypoints=https"
      - "traefik.http.routers.safe-whoami.tls=true"
      - "traefik.http.routers.safe-whoami.rule=Host(`whoami.${SWARM_HOST}`)"
      - "traefik.http.routers.safe-whoami.middlewares=secured@file"
      - "traefik.http.routers.unsafe-whoami.tls=false"
      - "traefik.http.routers.unsafe-whoami.entrypoints=http"
      - "traefik.http.routers.unsafe-whoami.middlewares=redirect-to-https@file,small-rate-limit@file"
      - "traefik.http.routers.unsafe-whoami.rule=Host(`whoami.${SWARM_HOST}`)"
    networks:
      - traefik-public


networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true

volumes:
  piHoleConfig:
  piHoleDnsMasq:
